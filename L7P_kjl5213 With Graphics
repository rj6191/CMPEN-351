.data
	numStack: .word 0:5
	
	winner: .asciiz "\nYou Win!"
	wrong: .asciiz "\nYou Lose!"
	return: .asciiz "\n"
	
.text
main:
	jal flashYellow
	
	li $t0, 5
	la $a2, numStack
	loop1:
		jal genRand
		sw $a0, 0($a2)
		addi $a2, $a2, 4
		addi $t0, $t0, -1
		bne $t0, 0, loop1
		
	la $a0, numStack
	la $a1, 1
	jal disp
	jal dispReturn
	la $a0, numStack
	li $a1, 1
	jal check
	jal dispReturn
	jal dispReturn
	jal dispReturn
	
	la $a0, numStack
	la $a1, 2
	jal disp
	jal dispReturn
	la $a0, numStack
	li $a1, 2
	jal check
	jal dispReturn
	jal dispReturn
	jal dispReturn
	
	la $a0, numStack
	la $a1, 3
	jal disp
	jal dispReturn
	la $a0, numStack
	li $a1, 3
	jal check
	jal dispReturn
	jal dispReturn
	jal dispReturn
	
	la $a0, numStack
	la $a1, 4
	jal disp
	jal dispReturn
	la $a0, numStack
	li $a1, 4
	jal check
	jal dispReturn
	jal dispReturn
	jal dispReturn
	
	la $a0, numStack
	la $a1, 5
	jal disp
	jal dispReturn
	la $a0, numStack
	li $a1, 5
	jal check
	jal dispReturn
	jal dispReturn
	jal dispReturn
	
	j win
	


flashYellow:
	li $v0, 0x10040000
	li $v1, 0xffff00
	sw $v1, ($v0)
	
	
	jr $ra

	
dispReturn:
	la $a0, return
	li $v0, 4
	syscall
	jr $ra
	
	
check:			# read in inputted ascii char and compare with first number on stack
			# args: a0 is pointer of stack begining, a1 is the number of inputs to check
	lw $t1, 0($a0)
	checkLoop:
		li $v0 12
		syscall
		addi $t0, $v0, -48
		bne $t0, $t1, incorrect
		add $a0, $a0, 4
		lw $t1, 0($a0)
		add $a1, $a1, -1
		bne $a1, 0, checkLoop
	
	jr $ra
	
	
disp:			# arguments: a0 is pointer at begining of stack, a1 is number of outputs to display
	la $t0, ($a0)
	multNumbers:
		li $v0, 1
		lw $a0, 0($t0)
		syscall
		add $t0, $t0, 4
		add $a1, $a1, -1
		bne $a1, 0, multNumbers
	
	jr $ra
	
	

	
	
	
	

	
genRand:		# returns random int between 1 and 4 (inclusive)
	li $v0, 30	# put 30 into v0 for get time syscall
	syscall		# call syscall to get time
	move $a0, $v0	# put the time into a0 to seed random number generator
	
	li $v0, 42	# put 42 into v0 for random number gen with upper bound
	li $a1, 4	# put 4 into a1 to set upper bound
	syscall		# create random num in a0
	
	add $a0, $a0, 1	# account for 0 in rand gen
	jr $ra
	
	
win:
	la $a0, winner
	li $v0, 4
	syscall
	j end
	
	
incorrect:
	la $a0, wrong
	li $v0, 4
	syscall
	
	
end:
	li $v0, 10
	syscall
